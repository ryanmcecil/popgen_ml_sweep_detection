// Adjustable input: SELCOEFF, SEED, SWEEPPOP ('1'-Africa, '2'-Europe, '3'-Asia), OUTPUT_PREFIX (filename)

initialize(){{
	//initializeTreeSeq(simplificationInterval=1000);
	setSeed({SEED});
	initializeMutationRate(2.363e-8);
	initializeMutationType("m1",0.5,"f",0.0);
	initializeMutationType("m2",0.5,"f",{SELCOEFF});
	initializeGenomicElementType("g1",m1,1.0);
	initializeGenomicElement(g1, 1, 80000);
	initializeRecombinationRate(1e-8);
}}

// Create the ancestral African population
1 {{
	sim.addSubpop("p1", 7310);
}}

// Expand the African population to 14474
// This occurs 148000 years (5920) generations ago
70100 {{ p1.setSubpopulationSize(14474); }}

// Split non-Africans from Africans and set up migration between them
// This occurs 51000 years (2040 generations) ago
73980 {{
	sim.addSubpopSplit("p2", 1861, p1);
	p1.setMigrationRates(c(p2), c(15e-5));
	p2.setMigrationRates(c(p1), c(15e-5));
}}

// Split p2 into European and East Asian subpopulations
// This occurs 23000 years (920 generations) ago
75100 {{
	sim.addSubpopSplit("p3", 554, p2);
	p2.setSubpopulationSize(1032); // reduce European size
	// Set migration rates for the rest of the simulation
	p1.setMigrationRates(c(p2, p3), c(2.5e-5, 0.78e-5));
	p2.setMigrationRates(c(p1, p3), c(2.5e-5, 3.11e-5));
	p3.setMigrationRates(c(p1, p2), c(0.78e-5, 3.11e-5));
}}

//make "beneficial" mutation neutral in populations that are not
//the focal population
fitness(m2, p{NONFOCALPOP1}){{return 1.0;}}
fitness(m2, p{NONFOCALPOP2}){{return 1.0;}}

// Set up exponential growth in Europe and East Asia
// Where N(0) is the base subpopulation size and t = gen - 5100:
// N(Europe) should be int(round(N(0) * e^(0.0038*t)))
// N(East Asia) should be int(round(N(0) * e^(0.0048*t)))
75100:76020 {{
	t = sim.generation - 75100;
	p2_size = round(1032 * exp(0.0038 * t));
	p3_size = round(554 * exp(0.0048 * t));
	p2.setSubpopulationSize(asInteger(p2_size));
	p3.setSubpopulationSize(asInteger(p3_size));
}}

75420 late() {{
	//save the state of the simulation
	sim.outputFull({SLIM_TMP_SAVE});
	//introduce the sweep mutation
	target = sample(p{SWEEPPOP}.genomes,20);
	target.addNewDrawnMutation(m2,40000);
}}

75420:76020 late() {{

	mut = sim.mutationsOfType(m2);
	if (size(mut)==1)
	{{
		if (sim.mutationFrequencies(NULL,mut) > 0.1)
		{{
			cat({SEED}+": ESTABLISHED\n");
			sim.deregisterScriptBlock(self);
		}}
	}}
	
	else
	{{
		cat(getSeed()+": LOST -- RESTARTING\n");
		//go back to generation 57400
		sim.readFromPopulationFile({SLIM_TMP_SAVE});
		//start a newly seeded run
		setSeed(getSeed()+2);
		//reintroduce sweep mutation
		target = sample(p{SWEEPPOP}.genomes,20);
		target.addNewDrawnMutation(m2, 40000);
	}}


}}

// Generation 6020 is the present. Output and terminate.
76020 late() {{
	//sim.treeSeqOutput({OUTPUT});
<<<<<<< HEAD
	p1Individuals = sample(p1.individuals,{NINDIV});
	p2Individuals = sample(p2.individuals,{NINDIV});
	p3Individuals = sample(p3.individuals,{NINDIV});
=======
	p1Individuals = sample(p1.individuals,64);
	p2Individuals = sample(p2.individuals,64);
	p3Individuals = sample(p3.individuals,64);
>>>>>>> 3ab9be5a0e89e17043c9d1df756f03b0d458ce83
	p1Individuals.genomes.outputVCF(paste0(c({OUTPUT},"_pop1.vcf")));
	p2Individuals.genomes.outputVCF(paste0(c({OUTPUT},"_pop2.vcf")));
	p3Individuals.genomes.outputVCF(paste0(c({OUTPUT},"_pop3.vcf")));
}}